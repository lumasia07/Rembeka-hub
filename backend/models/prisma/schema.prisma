// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  phoneNo   String
  password  String
  role      String   @default("VENDOR")
  createdAt DateTime @default(now())
  hub       Hub?     // Relation to the vendor's hub
}

model Hub {
  id          String      @id @default(uuid())
  name        String      // Business/Brand name
  description String?     // Description of the vendor's business
  location    String?
  logo        String?     // URL to logo image
  coverImage  String?     // URL to cover image
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  userId      String      @unique  // One-to-one with User
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  products    Product[]   // One-to-many with Product
  services    Service[]   // One-to-many with Service
  socials     Social[]    // One-to-many with Social
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  image       String?   // URL to product image
  inStock     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  hubId       String
  hub         Hub       @relation(fields: [hubId], references: [id], onDelete: Cascade)
}

model Service {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  duration    Int?      // Duration in minutes
  image       String?   // URL to service image
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  hubId       String
  hub         Hub       @relation(fields: [hubId], references: [id], onDelete: Cascade)
}

model Social {
  id        String   @id @default(uuid())
  platform  String   // e.g., Instagram, TikTok, Facebook
  handle    String   // Username or handle
  url       String   // Full URL to profile
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  hubId     String
  hub       Hub     @relation(fields: [hubId], references: [id], onDelete: Cascade)
}